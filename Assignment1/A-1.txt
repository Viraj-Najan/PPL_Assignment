A-1 Declarations, Expressions, and Assignments
----------------------------------------------

        Compile the following program (file  A-1.c) and observe the GIMPLE dumps
        and answer  the questions below. If  you manage to finish  all questions
        quickly try to attempt the optional problem.

        Source file : A-1.c
        Compilation : gcc-4.7.2 -c -fdump-tree-gimple A-1.c
        View result : vi -O A-1.c A-1.c.*.gimple
        Clear dumps : rm -f A-1.c.* A-1.o

Program
-------

	int Z;

	void main()
	{
		int a, b, c;
		int p = 6;
		int q;
		double r;

		a = 10;
		b = 20;
		c = a * b + 25;
		p = 6;
		q = Z;
		r = 34.5;
		Z = r;
		Z = Z + 1;
	}


Questions
---------

        1   How  do the  declarations  look in  the  GIMPLE? Specifically,  what
            happens to multiple  variables declared and initialized  on the same
            line? What happens to global declaration [int Z]?

        2   How are complex  expressions such as [c  = a * b +  25] broken down?
            Can you  determine a  rule as  to when  temporary variables  will be
            introduced?

        3   How are  floats/doubles represented in  GIMPLE? What happens  when a
            float/double is assigned to an integer in [Z = r]?

        4   How  are reads/writes  to the  global variable  Z performed?  Why is
            there a temporary introduced  for the statement [Z = Z  + 1] but not
            for the statements [q = Z] or [Z = p]?

Answers : 
        1.  Even though we declare multiple variables on same line , in GIMPLE file
            each declaration is on seperate line . Declaration and inialization of
            variable is seperated  . Global variables are not explicitly declared but
            they are accessed with same name initialized globally .

        2.  complex expressions are broken down into multiple primary operations ( like 
            addition, multiplication) each of which are executed on seperate line . 
            Temporary variables are introduced to store results of intermediate operations 
            in complex expressions .

        3.  Floats doubles are represented using Scientific notation . type casting is 
            introduced when one type of variable is assigned to other . ( here double to int )

        4.  Reads/writes to z are performed through loads to/stores from locals . in case 
            of Z = Z + 1 , temporary variable was introced because we are reading data from 
            memory location of Z , we can't simaltaneously use it to store data .  Hense we 
            need a temporary variable .





Optional Problem
----------------

        Try to understand the underlying GIMPLE representation by looking at the
        RAW dumps:

        Compilation : gcc-4.7.2 -c -fdump-tree-gimple-raw A-1.c
        View result : vi -O A-1.c A-1.c.*.gimple

Answer : 
        In underlying GIMPLE representation every expression is represented 
        using tree nodes . Eah operation node has a type ( Eg. mult_expr for multiplication),
        two operands and pointers to left and right child nodes . 


gimple dumps :
    main ()
    {
    int a;
    int b;
    int c;
    int p;
    int q;
    double r;

    p = 6;
    a = 10;
    b = 20;
    _1 = a * b;
    c = _1 + 25;
    p = 6;
    q = Z;
    r = 3.45e+1;
    _2 = (int) r;
    Z = _2;
    Z.0_3 = Z;
    _4 = Z.0_3 + 1;
    Z = _4;
    }



underlying GIMPLE representation ( RAW dumps ):
    main ()
    gimple_bind <
    int a;
    int b;
    int c;
    int p;
    int q;
    double r;

    gimple_assign <integer_cst, p, 6, NULL, NULL>
    gimple_assign <integer_cst, a, 10, NULL, NULL>
    gimple_assign <integer_cst, b, 20, NULL, NULL>
    gimple_assign <mult_expr, _1, a, b, NULL>
    gimple_assign <plus_expr, c, _1, 25, NULL>
    gimple_assign <integer_cst, p, 6, NULL, NULL>
    gimple_assign <var_decl, q, Z, NULL, NULL>
    gimple_assign <real_cst, r, 3.45e+1, NULL, NULL>
    gimple_assign <fix_trunc_expr, _2, r, NULL, NULL>
    gimple_assign <ssa_name, Z, _2, NULL, NULL>
    gimple_assign <var_decl, Z.0_3, Z, NULL, NULL>
    gimple_assign <plus_expr, _4, Z.0_3, 1, NULL>
    gimple_assign <ssa_name, Z, _4, NULL, NULL>
    >